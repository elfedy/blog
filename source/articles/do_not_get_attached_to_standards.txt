Current Title: Your final goal is to build software that looks good in the eyes of the user.

Concept of this article
Do not get attached to standards 
the ultimate goal is to write software that looks good in the eyes of the user
It is more valuable to write 3 mediocre applications than 1 perfect one


Everything else is secondary. In my short programming career I have been victim of trying to follow the trend of best practices. See a framework/library thatâ€™s on, other ones that are dead, use Object Oriented Programming, use the SOLID Principle, do TDD and write small methods, forget Object Oriented Programming and use Functional Programming, use Sublime, use Vim, use Atom, do not use comments, write good comments.



(Different ideas about a good programming)
You should learn all this things, but more important is to build lots of stuff, get used to finishing programs that you start and have a functional version of them.

OOP: 

#### The fear of not being perfect
Reading about best practices is good but the greatest drawback I found is that they bring on me the fear of not being perfect. I remember this well when i finished my first book about object oriented design
I went to the SOLID principles and got betting by the bug of wanting to extract everything into a PORO that had a single responsibility (Do a paragraph with all solid principles).

I made the decision fairly quickly not listen to that voices too much, it is a good idea to get to know the trends, it is a good idea to learn different programming paradigms and its design patterns. But there are no set of practices that are the end all be all of programming and you should never follow them blindly.

#### Some practices I am following right now



#### The ultimate goal

Redux example,

#### Links about this
Fun Fun function, the comments and the programming stages video
The one with Jonathan Blow about games written / years lived